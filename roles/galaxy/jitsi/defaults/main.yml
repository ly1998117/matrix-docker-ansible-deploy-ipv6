---

# Project source code URL: https://github.com/jitsi/docker-jitsi-meet

jitsi_enabled: true

jitsi_identifier: jitsi

jitsi_base_path: "/{{ jitsi_identifier }}"

jitsi_version: stable-9111

# The hostname at which Jitsi is served.
jitsi_hostname: ''

# The path at which Jitsi is served.
# This value must either be `/` or not end with a slash (e.g. `/jitsi`).
jitsi_path_prefix: /

jitsi_uid: ''
jitsi_gid: ''

# Username corresponding to jitsi_uid. If undefined, it will be auto-detected.
jitsi_user_username: ''

jitsi_architecture: ''

jitsi_enable_auth: false
jitsi_enable_guests: false
jitsi_enable_recording: false
jitsi_enable_transcriptions: false
jitsi_enable_jaas_components: false
jitsi_enable_p2p: true
jitsi_enable_av_moderation: true
jitsi_enable_breakout_rooms: true
jitsi_disable_gravatar: false

# Authentication type, must be one of internal, jwt, matrix or ldap.
# Currently, only internal, matrix and ldap mechanisms are supported by this role.
# matrix auth verifies against matrix openID, and requires a user-verification-service to run.
jitsi_auth_type: internal

# A list of Jitsi (Prosody) accounts to create using the internal authentication mechanism.
#
# Accounts added here and subsequently removed will not be automatically removed
# from the Prosody server until user account cleaning is integrated into the role.
#
# Example:
# jitsi_prosody_auth_internal_accounts:
#  - username: "jitsi-moderator"
#    password: "secret-password"
#  - username: "another-user"
#    password: "another-password"
jitsi_prosody_auth_internal_accounts: []

# Configuration options for LDAP authentication. For details see upstream:
#   https://github.com/jitsi/docker-jitsi-meet#authentication-using-ldap.
# Defaults are taken from:
#   https://github.com/jitsi/docker-jitsi-meet/blob/master/prosody/rootfs/defaults/saslauthd.conf
jitsi_ldap_url: ""
jitsi_ldap_base: ""
jitsi_ldap_binddn: ""
jitsi_ldap_bindpw: ""
jitsi_ldap_filter: "uid=%u"
jitsi_ldap_auth_method: "bind"
jitsi_ldap_version: "3"
jitsi_ldap_use_tls: false
jitsi_ldap_tls_ciphers: ""
jitsi_ldap_tls_check_peer: false
jitsi_ldap_tls_cacert_file: "/etc/ssl/certs/ca-certificates.crt"
jitsi_ldap_tls_cacert_dir: "/etc/ssl/certs"
jitsi_ldap_start_tls: false

# Auth type: matrix
jitsi_prosody_auth_matrix_user_verification_repo_location: "https://github.com/matrix-org/prosody-mod-auth-matrix-user-verification"
jitsi_prosody_auth_matrix_user_verification_repo_target: "{{ jitsi_prosody_ext_path }}/prosody_auth_matrix_user_verification"
jitsi_prosody_auth_matrix_user_verification_repo_version: "2839499cb03894d8cfc3e5b2219441427cb133d8"  # v1.8.0
jitsi_prosody_auth_matrix_uvs_sync_power_levels: false
jitsi_prosody_auth_matrix_uvs_location: ""
# Should match domain, see https://github.com/vector-im/element-web/pull/15114/commits/0410a6b3be82a41457275e4d1ce879dea146e092
jitsi_prosody_auth_matrix_jwt_app_id: "{{ jitsi_hostname }}"
jitsi_prosody_auth_matrix_files:
  - path: "mod_auth_matrix_user_verification.lua"
    when: true
  - path: "mod_matrix_power_sync.lua"
    when: "{{ jitsi_prosody_auth_matrix_uvs_sync_power_levels }}"

jitsi_prosody_auth_matrix_uvs_auth_token: ''

# Default max participants to the empty string
#
# The setting requires an integer to be set for usage and allows a user to specify the max number of particpants on a conference.
jitsi_prosody_max_participants: ''

jitsi_timezone: UTC

jitsi_xmpp_domain: meet.jitsi
jitsi_xmpp_server: xmpp.meet.jitsi
jitsi_xmpp_auth_domain: auth.meet.jitsi
jitsi_xmpp_bosh_url_base: http://{{ jitsi_xmpp_server }}:5280
jitsi_xmpp_guest_domain: guest.meet.jitsi
jitsi_xmpp_muc_domain: muc.meet.jitsi
jitsi_xmpp_internal_muc_domain: internal-muc.meet.jitsi
jitsi_xmpp_modules: ''

jitsi_recorder_domain: recorder.meet.jitsi

jitsi_jibri_brewery_muc: jibribrewery
jitsi_jibri_pending_timeout: 90
jitsi_jibri_xmpp_user: jibri
jitsi_jibri_xmpp_password: ''
jitsi_jibri_recorder_user: recorder
jitsi_jibri_recorder_password: ''

jitsi_enable_lobby: false

jitsi_container_image_tag: "{{ jitsi_version }}"

# The base container network. It will be auto-created by this role if it doesn't exist already.
jitsi_container_network: "{{ jitsi_identifier }}"

jitsi_container_labels_traefik_enabled: true
jitsi_container_labels_traefik_docker_network: "{{ jitsi_container_network }}"
jitsi_container_labels_traefik_hostname: "{{ jitsi_hostname }}"
# The path prefix must either be `/` or not end with a slash (e.g. `/jitsi`).
jitsi_container_labels_traefik_path_prefix: "{{ jitsi_path_prefix }}"
jitsi_container_labels_traefik_entrypoints: web-secure

jitsi_web_container_image: "{{ jitsi_web_container_image_registry_prefix }}jitsi/web:{{ jitsi_container_image_tag }}"
jitsi_web_container_image_force_pull: "{{ jitsi_web_container_image.endswith(':latest') }}"
jitsi_web_container_image_registry_prefix: docker.io/

# jitsi_web_container_labels_traefik_enabled controls whether labels to assist a Traefik reverse-proxy will be attached to the Web container.
# See `../templates/web/labels.j2` for details.
#
# To inject your own other container labels, see `jitsi_web_container_labels_additional_labels`.
jitsi_web_container_labels_traefik_enabled: "{{ jitsi_container_labels_traefik_enabled }}"
jitsi_web_container_labels_traefik_docker_network: "{{ jitsi_container_labels_traefik_docker_network }}"
jitsi_web_container_labels_traefik_hostname: "{{ jitsi_container_labels_traefik_hostname }}"
jitsi_web_container_labels_traefik_path_prefix: "{{ jitsi_container_labels_traefik_path_prefix }}"
jitsi_web_container_labels_traefik_rule: "Host(`{{ jitsi_web_container_labels_traefik_hostname }}`){% if jitsi_web_container_labels_traefik_path_prefix != '/' %} && PathPrefix(`{{ jitsi_web_container_labels_traefik_path_prefix }}`){% endif %}"
jitsi_web_container_labels_traefik_priority: 0
jitsi_web_container_labels_traefik_entrypoints: "{{ jitsi_container_labels_traefik_entrypoints }}"
jitsi_web_container_labels_traefik_tls: "{{ jitsi_web_container_labels_traefik_entrypoints != 'web' }}"
jitsi_web_container_labels_traefik_tls_certResolver: default  # noqa var-naming

# Controls which additional headers to attach to all HTTP requests.
# To add your own custom request headers, use `jitsi_web_container_labels_traefik_additional_response_headers_custom`
jitsi_web_container_labels_traefik_additional_request_headers: "{{ jitsi_web_container_labels_traefik_additional_request_headers_auto | combine(jitsi_web_container_labels_traefik_additional_request_headers_custom) }}"
jitsi_web_container_labels_traefik_additional_request_headers_auto: {}
jitsi_web_container_labels_traefik_additional_request_headers_custom: {}

# Controls which additional headers to attach to all HTTP responses.
# To add your own custom response headers, use `jitsi_web_container_labels_traefik_additional_response_headers_custom`
jitsi_web_container_labels_traefik_additional_response_headers: "{{ jitsi_web_container_labels_traefik_additional_response_headers_auto | combine(jitsi_web_container_labels_traefik_additional_response_headers_custom) }}"
jitsi_web_container_labels_traefik_additional_response_headers_auto: |
  {{
    {}
    | combine ({'X-XSS-Protection': jitsi_web_http_header_xss_protection} if jitsi_web_http_header_xss_protection else {})
    | combine ({'X-Frame-Options': jitsi_web_http_header_frame_options} if jitsi_web_http_header_frame_options else {})
    | combine ({'X-Content-Type-Options': jitsi_web_http_header_content_type_options} if jitsi_web_http_header_content_type_options else {})
    | combine ({'Content-Security-Policy': jitsi_web_http_header_content_security_policy} if jitsi_web_http_header_content_security_policy else {})
    | combine ({'Permission-Policy': jitsi_web_http_header_content_permission_policy} if jitsi_web_http_header_content_permission_policy else {})
    | combine ({'Strict-Transport-Security': jitsi_web_http_header_strict_transport_security} if jitsi_web_http_header_strict_transport_security and jitsi_web_container_labels_traefik_tls else {})
  }}
jitsi_web_container_labels_traefik_additional_response_headers_custom: {}

# jitsi_web_container_labels_additional_labels contains a multiline string with additional labels to add to the container label file.
# See `../templates/labels.j2` for details.
#
# Example:
# jitsi_web_container_labels_additional_labels: |
#   my.label=1
#   another.label="here"
jitsi_web_container_labels_additional_labels: ''

jitsi_web_base_path: "{{ jitsi_base_path }}/web"
jitsi_web_config_path: "{{ jitsi_web_base_path }}/config"
jitsi_web_transcripts_path: "{{ jitsi_web_base_path }}/transcripts"
jitsi_web_crontabs_path: "{{ jitsi_web_base_path }}/crontabs"
jitsi_web_well_known_path: "{{ jitsi_web_base_path }}/well-known"

jitsi_web_public_url: "https://{{ jitsi_hostname }}{{ '' if jitsi_path_prefix == '/' else jitsi_path_prefix }}/"

# STUN servers used in the web UI. Feel free to point them to your own STUN server.
# Addresses need to be prefixed with one of `stun:`, `turn:` or `turns:`.
jitsi_web_stun_servers: ['stun:meet-jit-si-turnrelay.jitsi.net:443']

# Controls whether Jitsi Web will allow being put in an iframe, etc.
jitsi_web_framing_enabled: false

# Specifies the value of the `X-XSS-Protection` header
# Stops pages from loading when they detect reflected cross-site scripting (XSS) attacks.
#
# Learn more about it is here:
# - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
# - https://portswigger.net/web-security/cross-site-scripting/reflected
jitsi_web_http_header_xss_protection: "1; mode=block"

# Specifies the value of the `X-Frame-Options` header which controls whether framing can happen.
# See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
jitsi_web_http_header_frame_options: "{{ '' if jitsi_web_framing_enabled else 'SAMEORIGIN' }}"

# Specifies the value of the `X-Content-Type-Options` header.
# See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
jitsi_web_http_header_content_type_options: nosniff

# Specifies the value of the `Content-Security-Policy` header.
# See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy
jitsi_web_http_header_content_security_policy: |-
  {{ '' if jitsi_web_framing_enabled else "frame-ancestors 'self'" }}

# Specifies the value of the `Permission-Policy` header.
# See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permission-Policy
jitsi_web_http_header_content_permission_policy: "{{ 'interest-cohort=()' if jitsi_web_http_floc_optout_enabled else '' }}"

# Specifies the value of the `Strict-Transport-Security` header.
# See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
jitsi_web_http_header_strict_transport_security: "max-age=31536000; includeSubDomains{{ '; preload' if jitsi_web_hsts_preload_enabled else '' }}"

# Controls whether to send a "Permissions-Policy interest-cohort=();" header along with all responses
#
# Learn more about what it is here:
# - https://www.eff.org/deeplinks/2021/03/googles-floc-terrible-idea
# - https://paramdeo.com/blog/opting-your-website-out-of-googles-floc-network
# - https://amifloced.org/
#
# Of course, a better solution is to just stop using browsers (like Chrome), which participate in such tracking practices.
# See: `jitsi_web_http_header_content_permission_policy`
jitsi_web_http_floc_optout_enabled: true

# Controls if HSTS preloading is enabled
#
# In its strongest and recommended form, the [HSTS policy](https://www.chromium.org/hsts) includes all subdomains, and
# indicates a willingness to be "preloaded" into browsers:
# `Strict-Transport-Security: max-age=31536000; includeSubDomains; preload`
# For more information visit:
# - https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
# - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
# - https://hstspreload.org/#opt-in
# See: `jitsi_web_http_header_strict_transport_security`
jitsi_web_hsts_preload_enabled: false

jitsi_letsencrypt_domain: "{{ jitsi_hostname }}"
jitsi_letsencrypt_email: ''

jitsi_turn_credentials: ''
jitsi_turn_host: ''
jitsi_turns_host: ''
jitsi_turn_port: ''
jitsi_turns_port: ''
jitsi_turn_transport: tcp

# Controls whether Etherpad will be available within Jitsi
jitsi_etherpad_enabled: false
# Specifies the Etherpad base URL (e.g. https://etherpad.DOMAIN or https://hostname/etherpad)
jitsi_etherpad_base: ''

# Controls whether the jitsi-web container exposes its HTTP port (tcp/80 in the container).
#
# Takes an "<ip>:<port>" or "<port>" value (e.g. "127.0.0.1:13080"), or empty string to not expose.
jitsi_web_container_http_host_bind_port: ''

# A list of additional container networks that the Web container would be connected to.
# The role does not create these networks, so make sure they already exist.
# Use this to expose this container to another reverse proxy, which runs in a different container network.
jitsi_web_container_additional_networks: "{{ jitsi_web_container_additional_networks_auto + jitsi_web_container_additional_networks_custom }}"
jitsi_web_container_additional_networks_auto: []
jitsi_web_container_additional_networks_custom: []

# A list of extra arguments to pass to the container
jitsi_web_container_extra_arguments: []

# List of systemd services that jitsi-web.service depends on
jitsi_web_systemd_required_services_list: ['docker.service']


# Custom configuration to be appended to `interface_config.js`, passed to Jitsi Web.
#
# Note: not to be confused with `jitsi_web_custom_config_extension`.
#
# For interface configuration, the flow is like this:
# - a default `interface_config.js` is generated from within the docker image
# - the contents of `jitsi_web_custom_interface_config_extension` is appended and can define new settings or override defaults.
#
# Example:
# jitsi_web_custom_interface_config_extension: |
#   interfaceConfig.LANG_DETECTION = false;
#   interfaceConfig.SHOW_JITSI_WATERMARK = false;
#   interfaceConfig.DISABLE_VIDEO_BACKGROUND = true;
jitsi_web_custom_interface_config_extension: ''


# Controls after which participant audio will be muted. If not specified, defaults to Jitsi's default value (likely 10)
jitsi_web_config_start_audio_muted_after_nth_participant: ~
# Controls after which participant video will be muted. If not specified, defaults to Jitsi's default value (likely 10)
jitsi_web_config_start_video_muted_after_nth_participant: ~

jitsi_web_config_defaultLanguage: 'en'  # noqa var-naming

# Ideal and also maximum resolution width. If not specified, defaults to Jitsi's default value (likely 1280)
jitsi_web_config_resolution_width_ideal_and_max: ~
# Minimum resolution width. If not specified, defaults to Jitsi's default value (likely 320)
jitsi_web_config_resolution_width_min: ~
# Ideal and also maximum resolution height. If not specified, defaults to Jitsi's default value (likely 720)
jitsi_web_config_resolution_height_ideal_and_max: ~
# Minimum resolution height. If not specified, defaults to Jitsi's default value (likely 180)
jitsi_web_config_resolution_height_min: ~

# Custom configuration to be injected into `custom-config.js`, passed to Jitsi Web.
# This configuration gets appended to the final configuration that Jitsi Web uses.
#
# Note: not to be confused with `jitsi_web_custom_interface_config_extension`.
#
# The flow is like this:
# - some default configuration is automatically generated based on the environment variables passed to the Jitsi Web container
# - the contents of `custom-config.js` is appended to it (see `templates/web/custom-config.js.j2`)
# - said `custom-config.js` contains your custom contents specified in `jitsi_web_custom_config_extension`.
#
# Example:
# jitsi_web_custom_config_extension: |
#   if (!config.hasOwnProperty('testing')) config.testing = {};
#   config.testing.p2pTestMode = true
jitsi_web_custom_config_extension: ''

# Additional environment variables to pass to the Jitsi Web container.
# You can use this to further influence the default configuration generated by the Jitsi Web container on every startup.
# Besides influencing the final configuration by passing environment variables, you can also inject custom configuration
# by using `jitsi_web_custom_config_extension`.
#
# Example:
# jitsi_web_environment_variables_extension: |
#   ENABLE_FILE_RECORDING_SERVICE=1
#   DROPBOX_APPKEY=something
#   DROPBOX_REDIRECT_URI=something
jitsi_web_environment_variables_extension: ''

jitsi_prosody_container_image: "{{ jitsi_prosody_container_image_registry_prefix }}jitsi/prosody:{{ jitsi_container_image_tag }}"
jitsi_prosody_container_image_force_pull: "{{ jitsi_prosody_container_image.endswith(':latest') }}"
jitsi_prosody_container_image_registry_prefix: docker.io/

# A list of additional container networks that the Prosody container would be connected to.
# The role does not create these networks, so make sure they already exist.
# Use this to expose this container to another reverse proxy, which runs in a different container network.
jitsi_prosody_container_additional_networks: "{{ jitsi_prosody_container_additional_networks_auto + jitsi_prosody_container_additional_networks_custom }}"
jitsi_prosody_container_additional_networks_auto: []
jitsi_prosody_container_additional_networks_custom: []

# jitsi_prosody_container_labels_traefik_enabled controls whether labels to assist a Traefik reverse-proxy will be attached to the Prosody container.
# See `../templates/web/labels.j2` for details.
#
# To inject your own other container labels, see `jitsi_prosody_container_labels_additional_labels`.
jitsi_prosody_container_labels_traefik_enabled: "{{ jitsi_container_labels_traefik_enabled }}"
jitsi_prosody_container_labels_traefik_docker_network: "{{ jitsi_container_labels_traefik_docker_network }}"
jitsi_prosody_container_labels_traefik_hostname: "{{ jitsi_container_labels_traefik_hostname }}"
jitsi_prosody_container_labels_traefik_path_prefix: "{{ jitsi_container_labels_traefik_path_prefix }}"
jitsi_prosody_container_labels_traefik_rule: "Host(`{{ jitsi_prosody_container_labels_traefik_hostname }}`) && PathPrefix(`{{ jitsi_prosody_container_labels_traefik_path_prefix }}{{ '' if jitsi_container_labels_traefik_path_prefix == '/' else '/' }}xmpp-websocket`)"
jitsi_prosody_container_labels_traefik_priority: 0
jitsi_prosody_container_labels_traefik_entrypoints: "{{ jitsi_container_labels_traefik_entrypoints }}"
jitsi_prosody_container_labels_traefik_tls: "{{ jitsi_prosody_container_labels_traefik_entrypoints != 'web' }}"
jitsi_prosody_container_labels_traefik_tls_certResolver: default  # noqa var-naming

# Controls which additional headers to attach to all HTTP requests.
# To add your own custom request headers, use `jitsi_prosody_container_labels_traefik_additional_response_headers_custom`
jitsi_prosody_container_labels_traefik_additional_request_headers: "{{ jitsi_prosody_container_labels_traefik_additional_request_headers_auto | combine(jitsi_prosody_container_labels_traefik_additional_request_headers_custom) }}"
jitsi_prosody_container_labels_traefik_additional_request_headers_auto: {}
jitsi_prosody_container_labels_traefik_additional_request_headers_custom: {}

# Controls which additional headers to attach to all HTTP responses.
# To add your own custom response headers, use `jitsi_prosody_container_labels_traefik_additional_response_headers_custom`
jitsi_prosody_container_labels_traefik_additional_response_headers: "{{ jitsi_prosody_container_labels_traefik_additional_response_headers_auto | combine(jitsi_prosody_container_labels_traefik_additional_response_headers_custom) }}"
jitsi_prosody_container_labels_traefik_additional_response_headers_auto: {}
jitsi_prosody_container_labels_traefik_additional_response_headers_custom: {}

# jitsi_prosody_container_labels_additional_labels contains a multiline string with additional labels to add to the container label file.
# See `../templates/labels.j2` for details.
#
# Example:
# jitsi_prosody_container_labels_additional_labels: |
#   my.label=1
#   another.label="here"
jitsi_prosody_container_labels_additional_labels: ''

jitsi_prosody_base_path: "{{ jitsi_base_path }}/prosody"
jitsi_prosody_config_path: "{{ jitsi_prosody_base_path }}/config"
jitsi_prosody_plugins_path: "{{ jitsi_prosody_base_path }}/prosody-plugins-custom"
jitsi_prosody_ext_path: "{{ jitsi_prosody_base_path }}/ext"

# well known is currently only needed for auth type "matrix"
jitsi_web_well_known_enabled: "{{ jitsi_web_well_known_element_jitsi_enabled }}"
jitsi_web_well_known_element_jitsi_enabled: "{{ jitsi_enable_auth | bool and jitsi_auth_type == 'matrix' }}"
jitsi_web_well_known_element_jitsi_json: '{"auth": "openidtoken-jwt"}'

jitsi_muc_modules: |
  {{
    (['matrix_power_sync'] if jitsi_prosody_auth_matrix_uvs_sync_power_levels | bool else [])
  }}

# A list of extra arguments to pass to the container
jitsi_prosody_container_extra_arguments: []

# List of systemd services that jitsi-prosody.service depends on
jitsi_prosody_systemd_required_services_list: ['docker.service']

# Neccessary Port binding for those disabling the integrated nginx proxy
jitsi_prosody_container_http_host_bind_port: ''

jitsi_prosody_container_jvb_host_bind_port: ''

jitsi_jicofo_container_image: "{{ jitsi_jicofo_container_image_registry_prefix }}jitsi/jicofo:{{ jitsi_container_image_tag }}"
jitsi_jicofo_container_image_force_pull: "{{ jitsi_jicofo_container_image.endswith(':latest') }}"
jitsi_jicofo_container_image_registry_prefix: docker.io/

# A list of additional container networks that the Jicofo container would be connected to.
# The role does not create these networks, so make sure they already exist.
# Use this to expose this container to another reverse proxy, which runs in a different container network.
jitsi_jicofo_container_additional_networks: "{{ jitsi_jicofo_container_additional_networks_auto + jitsi_jicofo_container_additional_networks_custom }}"
jitsi_jicofo_container_additional_networks_auto: []
jitsi_jicofo_container_additional_networks_custom: []

jitsi_jicofo_base_path: "{{ jitsi_base_path }}/jicofo"
jitsi_jicofo_config_path: "{{ jitsi_jicofo_base_path }}/config"

# A list of extra arguments to pass to the container
jitsi_jicofo_container_extra_arguments: []

# List of systemd services that jitsi-jicofo.service depends on
jitsi_jicofo_systemd_required_services_list: "{{ jitsi_jicofo_systemd_required_services_list_default + jitsi_jicofo_systemd_required_services_list_auto + jitsi_jicofo_systemd_required_services_list_custom }}"
jitsi_jicofo_systemd_required_services_list_default: |
  {{
    [
      'docker.service',
      (jitsi_identifier + '-prosody.service'),
    ]
  }}
jitsi_jicofo_systemd_required_services_list_auto: []
jitsi_jicofo_systemd_required_services_list_custom: []

jitsi_jicofo_component_secret: ''
jitsi_jicofo_auth_user: focus
jitsi_jicofo_auth_password: ''

# To enable Sentry integration for Jicofo, specify a valid DSN connection string
jitsi_jicofo_sentry_dsn: ''

jitsi_jvb_container_image: "{{ jitsi_jvb_container_image_registry_prefix }}jitsi/jvb:{{ jitsi_container_image_tag }}"
jitsi_jvb_container_image_force_pull: "{{ jitsi_jvb_container_image.endswith(':latest') }}"
jitsi_jvb_container_image_registry_prefix: docker.io/

# A list of additional container networks that the JVB container would be connected to.
# The role does not create these networks, so make sure they already exist.
# Use this to expose this container to another reverse proxy, which runs in a different container network.
jitsi_jvb_container_additional_networks: "{{ jitsi_jvb_container_additional_networks_auto + jitsi_jvb_container_additional_networks_custom }}"
jitsi_jvb_container_additional_networks_auto: []
jitsi_jvb_container_additional_networks_custom: []

# jitsi_jvb_container_labels_traefik_enabled controls whether labels to assist a Traefik reverse-proxy will be attached to the JVB container.
# See `../templates/web/labels.j2` for details.
#
# To inject your own other container labels, see `jitsi_jvb_container_labels_additional_labels`.
jitsi_jvb_container_labels_traefik_enabled: "{{ jitsi_container_labels_traefik_enabled }}"
jitsi_jvb_container_labels_traefik_docker_network: "{{ jitsi_container_labels_traefik_docker_network }}"
jitsi_jvb_container_labels_traefik_hostname: "{{ jitsi_container_labels_traefik_hostname }}"
jitsi_jvb_container_labels_traefik_path_prefix: "{{ jitsi_container_labels_traefik_path_prefix }}"
jitsi_jvb_container_labels_traefik_rule: "Host(`{{ jitsi_jvb_container_labels_traefik_hostname }}`) && PathPrefix(`{{ jitsi_jvb_container_labels_traefik_path_prefix }}{{ '' if jitsi_container_labels_traefik_path_prefix == '/' else '/' }}colibri-ws/{{ jitsi_jvb_server_id }}/`)"
jitsi_jvb_container_labels_traefik_priority: 0
jitsi_jvb_container_labels_traefik_entrypoints: "{{ jitsi_container_labels_traefik_entrypoints }}"
jitsi_jvb_container_labels_traefik_tls: "{{ jitsi_jvb_container_labels_traefik_entrypoints != 'web' }}"
jitsi_jvb_container_labels_traefik_tls_certResolver: default  # noqa var-naming

# Controls which additional headers to attach to all HTTP requests.
# To add your own custom request headers, use `jitsi_jvb_container_labels_traefik_additional_response_headers_custom`
jitsi_jvb_container_labels_traefik_additional_request_headers: "{{ jitsi_jvb_container_labels_traefik_additional_request_headers_auto | combine(jitsi_jvb_container_labels_traefik_additional_request_headers_custom) }}"
jitsi_jvb_container_labels_traefik_additional_request_headers_auto: {}
jitsi_jvb_container_labels_traefik_additional_request_headers_custom: {}

# Controls which additional headers to attach to all HTTP responses.
# To add your own custom response headers, use `jitsi_jvb_container_labels_traefik_additional_response_headers_custom`
jitsi_jvb_container_labels_traefik_additional_response_headers: "{{ jitsi_jvb_container_labels_traefik_additional_response_headers_auto | combine(jitsi_jvb_container_labels_traefik_additional_response_headers_custom) }}"
jitsi_jvb_container_labels_traefik_additional_response_headers_auto: {}
jitsi_jvb_container_labels_traefik_additional_response_headers_custom: {}

# jitsi_jvb_container_labels_additional_labels contains a multiline string with additional labels to add to the container label file.
# See `../templates/labels.j2` for details.
#
# Example:
# jitsi_jvb_container_labels_additional_labels: |
#   my.label=1
#   another.label="here"
jitsi_jvb_container_labels_additional_labels: ''

jitsi_jvb_base_path: "{{ jitsi_base_path }}/jvb"
jitsi_jvb_config_path: "{{ jitsi_jvb_base_path }}/config"

# A list of extra arguments to pass to the container
jitsi_jvb_container_extra_arguments: []

# List of systemd services that jitsi-jvb.service depends on
jitsi_jvb_systemd_required_services_list: ['docker.service']

jitsi_jvb_auth_user: jvb
jitsi_jvb_auth_password: ''

# To enable Sentry integration for JVB, specify a valid DSN connection string
jitsi_jvb_sentry_dsn: ''

# STUN servers used by JVB on the server-side, so it can discover its own external IP address.
# Pointing this to a STUN server running on the same Docker network may lead to incorrect IP address discovery.
jitsi_jvb_stun_servers: ['meet-jit-si-turnrelay.jitsi.net:443']

jitsi_jvb_brewery_muc: jvbbrewery
jitsi_jvb_rtp_udp_port: 10000
jitsi_jvb_rtp_tcp_port: 4443
jitsi_jvb_server_id: 'jvb-1'


# Custom configuration to be injected into `custom-sip-communicator.properties`, passed to Jitsi JVB.
# This configuration gets appended to the final configuration that Jitsi JVB uses.
#
# The flow is like this:
# - some default configuration is automatically generated based on the environment variables passed to the Jitsi JVB container
# - the contents of `custom-sip-communicator.properties` is appended to it (see `templates/jvb/custom-sip-communicator.properties.j2`)
# - said `custom-sip-communicator.properties` contains your custom contents specified in `jitsi_jvb_custom_config_extension`.
#
# Example:
# jitsi_jvb_custom_config_extension: |
#   org.jitsi.videobridge.xmpp.user.shard.DISABLE_CERTIFICATE_VERIFICATION=false
#   org.jitsi.videobridge.ENABLE_STATISTICS=false
jitsi_jvb_custom_config_extension: ''

# Additional environment variables to pass to the Jitsi JVB container.
# You can use this to further influence the default configuration generated by the Jitsi JVB container on every startup.
# Besides influencing the final configuration by passing environment variables, you can also inject custom configuration
# by using `jitsi_jvb_custom_config_extension`.
#
# Example:
# jitsi_jvb_environment_variables_extension: |
#   SOME_VARIABLE=1
#   ANOTHER_VARIABLE=something
jitsi_jvb_environment_variables_extension: ''

# Controls whether the jitsi-jvb container exposes its RTP UDP port (udp/10000 in the container).
#
# Takes an "<ip>:<port>" or "<port>" value (e.g. "127.0.0.1:10000"), or empty string to not expose.
jitsi_jvb_container_rtp_udp_host_bind_port: "{{ jitsi_jvb_rtp_udp_port }}"

# Controls whether the jitsi-jvb container exposes its RTP UDP port (udp/4443 in the container).
#
# Takes an "<ip>:<port>" or "<port>" value (e.g. "127.0.0.1:4443"), or empty string to not expose.
jitsi_jvb_container_rtp_tcp_host_bind_port: "{{ jitsi_jvb_rtp_tcp_port }}"

# Controls whether the jitsi-jvb container exposes its Colibri WebSocket port (tcp/9090 in the container).
#
# Takes an "<ip>:<port>" or "<port>" value (e.g. "127.0.0.1:12090"), or empty string to not expose.
jitsi_jvb_container_colibri_ws_host_bind_port: ''

# Allows abailty to set XMPP AUTH user if using JIGASI
jitsi_jigasi_xmpp_user: ''
# Allows abailty to set XMPP AUTH pasword if using JIGASI
jitsi_jigasi_xmpp_password: ''
